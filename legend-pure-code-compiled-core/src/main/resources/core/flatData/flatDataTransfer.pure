// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Class {meta::pure::profiles::doc.doc = 'Raw data read from the store'} meta::flatData::transfer::RawFlatData
{
  number: Integer[1];
  lineNumber: Integer[1];
  record: String[1];
  recordValues: meta::flatData::transfer::RawFlatDataValue[*];
}

Class meta::flatData::transfer::RawFlatDataValue
{
  address: meta::pure::metamodel::type::Any[1];
  rawValue: String[1];
}

Class {meta::pure::profiles::doc.doc = 'Parsed data according to a store record definition'} meta::flatData::transfer::ParsedFlatData
{
  typeName: String[1];
  values: meta::flatData::transfer::ParsedFlatDataValue[*];
  oneString(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@String)->toOne()}: String[1];
  oneNumber(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Number)->toOne()}: Number[1];
  oneInteger(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Integer)->toOne()}: Integer[1];
  oneFloat(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Float)->toOne()}: Float[1];
  oneDecimal(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Decimal)->toOne()}: Decimal[1];
  oneBoolean(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Boolean)->toOne()}: Boolean[1];
  oneDate(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Date)->toOne()}: Date[1];
  oneStrictDate(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@StrictDate)->toOne()}: StrictDate[1];
  oneDateTime(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@DateTime)->toOne()}: DateTime[1];
  oneRecordType(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@meta::flatData::transfer::ParsedFlatData)->toOne()}: meta::flatData::transfer::ParsedFlatData[1];
  optionalString(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@String)->first()}: String[0..1];
  optionalNumber(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Number)->first()}: Number[0..1];
  optionalInteger(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Integer)->first()}: Integer[0..1];
  optionalFloat(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Float)->first()}: Float[0..1];
  optionalDecimal(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Decimal)->first()}: Decimal[0..1];
  optionalBoolean(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Boolean)->first()}: Boolean[0..1];
  optionalDate(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@Date)->first()}: Date[0..1];
  optionalStrictDate(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@StrictDate)->first()}: StrictDate[0..1];
  optionalDateTime(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@DateTime)->first()}: DateTime[0..1];
  optionalRecordType(label: meta::pure::metamodel::type::Any[1]) {$this.values->filter(v|$v.label == $label).value->cast(@meta::flatData::transfer::ParsedFlatData)->first()}: meta::flatData::transfer::ParsedFlatData[0..1];
}

Class meta::flatData::transfer::ParsedFlatDataValue
{
  label: String[1];
  value: meta::pure::metamodel::type::Any[1];
}