// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::graphFetch::*;
import meta::pure::graphFetch::execution::*;
import meta::pure::metamodel::path::*;

Class meta::pure::graphFetch::GraphFetchTree
{
   subTrees : GraphFetchTree[*];
}

Class meta::pure::graphFetch::RootGraphFetchTree<T> extends GraphFetchTree, PackageableElement
{
   class : Class<T>[1];
}

Class meta::pure::graphFetch::PropertyGraphFetchTree extends GraphFetchTree
{
   property : AbstractProperty<Any>[1];
   parameters : ValueSpecification[*];
   alias : String[0..1];
   subType : Class<Any>[0..1];
   
   isPrimitive(){
      $this.property->functionReturnType().rawType->toOne()->instanceOf(PrimitiveType) || $this.property->functionReturnType().rawType->toOne()->instanceOf(Enumeration)
   }:Boolean[1];

   isQualifiedProperty(){
      $this.property->instanceOf(QualifiedProperty)
   }:Boolean[1];
}

native function meta::pure::functions::lang::match<T|m,n>(var:Any[*], functions:Function<{Nil[n]->T[m]}>[1..*]):T[m];

native function meta::pure::functions::meta::instanceOf(instance:Any[1], type:Type[1]):Boolean[1];

native function meta::pure::functions::collection::at<T>(set:T[*], key:Integer[1]):T[1];

native function meta::pure::functions::meta::genericType(any:Any[*]):GenericType[1];

native function meta::pure::functions::lang::cast<T|m>(source:Any[m], object:T[1]):T[m];

function meta::pure::functions::meta::type(any:Any[*]):Type[1]
{
    $any->genericType().rawType->toOne()
}

native function meta::pure::functions::meta::id(instance:Any[1]):String[1];

native function meta::pure::functions::asserts::assert(condition:Boolean[1], messageFunction:Function<{->String[1]}>[1]):Boolean[1];

function meta::pure::functions::meta::functionReturnType(f:Function<Any>[1]):GenericType[1]
{
   $f->match(
               [
                  p:AbstractProperty<Any>[1] | $p.genericType,
                  p:Path<Nil,Any|*>[1] | $p.classifierGenericType->toOne().typeArguments->at(1),
                  f:NativeFunction<Any>[1] | $f->genericType().typeArguments->at(0).rawType->toOne()->cast(@FunctionType).returnType,
                  f:FunctionDefinition<Any>[1] | $f->genericType().typeArguments->at(0).rawType->toOne()->cast(@FunctionType).returnType,
                  a:Any[1] | assert(false, |'functionReturnType not supported yet for the type '+$a->type()->id());^GenericType();
               ]
            );
}