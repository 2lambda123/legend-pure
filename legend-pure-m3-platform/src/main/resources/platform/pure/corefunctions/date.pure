// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Functions for constructing dates
native function meta::pure::functions::date::date(year:Integer[1]):Date[1];
native function meta::pure::functions::date::date(year:Integer[1], month:Integer[1]):Date[1];
native function meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1]):StrictDate[1];
native function meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1], hour:Integer[1]):DateTime[1];
native function meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1], hour:Integer[1], minute:Integer[1]):DateTime[1];
native function meta::pure::functions::date::date(year:Integer[1], month:Integer[1], day:Integer[1], hour:Integer[1], minute:Integer[1], second:Number[1]):DateTime[1];

// Returns the current day.
native function meta::pure::functions::date::today():StrictDate[1];

// Returns the current time to a system dependent precision.
native function meta::pure::functions::date::now():DateTime[1];

native function meta::pure::functions::date::hasSubsecond(d:Date[1]):Boolean[1];

native function meta::pure::functions::date::hasSubsecondWithAtLeastPrecision(d:Date[1], minPrecision:Integer[1]):Boolean[1];

native function meta::pure::functions::date::hasSecond(d:Date[1]):Boolean[1];

native function meta::pure::functions::date::hasMinute(d:Date[1]):Boolean[1];

native function meta::pure::functions::date::hasHour(d:Date[1]):Boolean[1];

native function meta::pure::functions::date::hasDay(d:Date[1]):Boolean[1];

native function meta::pure::functions::date::hasMonth(d:Date[1]):Boolean[1];

native function meta::pure::functions::date::second(d:Date[1]):Integer[1];

native function meta::pure::functions::date::minute(d:Date[1]):Integer[1];

native function meta::pure::functions::date::hour(d:Date[1]):Integer[1];

native function meta::pure::functions::date::dayOfMonth(d:Date[1]):Integer[1];

native function meta::pure::functions::date::dayOfWeekNumber(d:Date[1]):Integer[1];

native function meta::pure::functions::date::weekOfYear(d:Date[1]):Integer[1];

native function meta::pure::functions::date::monthNumber(d:Date[1]):Integer[1];

native function meta::pure::functions::date::year(d:Date[1]):Integer[1];

// Returns the date part of a date, i.e., the year, month, and day. For dates that are month or year precision, the date is returned unchanged.
native function meta::pure::functions::date::datePart(d:Date[1]):Date[1];

native function meta::pure::functions::date::dateDiff(d1:Date[1], d2:Date[1], du:DurationUnit[1]):Integer[1];


Enum meta::pure::functions::date::Month
{
   January,
   February,
   March,
   April,
   May, 
   June,
   July,
   August,
   September,
   October,
   November,
   December
}

Enum meta::pure::functions::date::Quarter
{
   //todo - change these to numbers when we support integers in enums (1,2,3,4)
   Q1,
   Q2,
   Q3,
   Q4
}

Enum meta::pure::functions::date::DayOfWeek
{
   Monday,
   Tuesday,
   Wednesday,
   Thursday,
   Friday,
   Saturday,
   Sunday
}

native function meta::pure::functions::date::adjust(date:Date[1], number:Integer[1], unit:DurationUnit[1]):Date[1];

Class meta::pure::functions::date::Duration
{
    number:Integer[1];
    unit:DurationUnit[1];
}

Enum meta::pure::functions::date::DurationUnit
{
    YEARS,
    MONTHS,
    WEEKS,
    DAYS,
    HOURS,
    MINUTES,
    SECONDS,
    MILLISECONDS,
    MICROSECONDS,
    NANOSECONDS
}

Class meta::pure::functions::date::Time
{
   hours:Integer[1];
   minutes:Integer[1];
   seconds:Integer[1];
}