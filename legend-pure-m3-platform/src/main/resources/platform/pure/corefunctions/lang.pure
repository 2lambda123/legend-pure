// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Class meta::pure::functions::lang::KeyValue
{
    key : String[1];
    value : Any[*];
}

native function meta::pure::functions::lang::dynamicNew(class:Class<Any>[1], keyExpressions:KeyValue[*]):Any[1];
native function meta::pure::functions::lang::dynamicNew(genericType:GenericType[1], keyExpressions:KeyValue[*]):Any[1];
native function meta::pure::functions::lang::dynamicNew(class:Class<Any>[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1],constraintsManager:Function<{Any[1]->Any[1]}>[0..1]):Any[1];
native function meta::pure::functions::lang::dynamicNew(genericType:GenericType[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1],constraintsManager:Function<{Any[1]->Any[1]}>[0..1]):Any[1];
native function meta::pure::functions::lang::dynamicNew(class:Class<Any>[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1]):Any[1];
native function meta::pure::functions::lang::dynamicNew(genericType:GenericType[1], keyExpressions:KeyValue[*], getterOverrideToOne:Function<{Any[1],Property<Nil,Any|0..1>[1]->Any[0..1]}>[0..1], getterOverrideToMany : Function<{Any[1],Property<Nil,Any|*>[1]->Any[*]}>[0..1], hiddenPayload:Any[0..1]):Any[1];

native function meta::pure::functions::lang::removeOverride<T>(instance:T[1]):T[1];

native function meta::pure::functions::lang::rawEvalProperty<V|m>(p:Property<Nil,V|m>[1], a:Any[1]):V[m];

native function meta::pure::functions::lang::evaluate(func:Function<Any>[1], params:List<Any>[*]):Any[*];

native function meta::pure::functions::lang::eval<V|m>(func:Function<{->V[m]}>[1]):V[m];

native function meta::pure::functions::lang::eval<T,V|m,n>(func:Function<{T[n]->V[m]}>[1], param:T[n]):V[m];

native function meta::pure::functions::lang::eval<T,U,V|m,n,p>(func:Function<{T[n],U[p]->V[m]}>[1], param1:T[n], param2:U[p]):V[m];

native function meta::pure::functions::lang::eval<T,U,V,W|m,n,p,q>(func:Function<{T[n],U[p],W[q]->V[m]}>[1], param1:T[n], param2:U[p], param3:W[q]):V[m];

native function meta::pure::functions::lang::eval<T,U,V,W,X|m,n,p,q,r>(func:Function<{T[n],U[p],W[q],X[r]->V[m]}>[1], param1:T[n], param2:U[p], param3:W[q], param4:X[r]):V[m];

native function meta::pure::functions::lang::eval<T,U,V,W,X,Y|m,n,p,q,r,s>(func:Function<{T[n],U[p],W[q],X[r],Y[s]->V[m]}>[1], param1:T[n], param2:U[p], param3:W[q], param4:X[r], param5:Y[s]):V[m];

native function meta::pure::functions::lang::eval<T,U,V,W,X,Y,Z|m,n,p,q,r,s,t>(func:Function<{T[n],U[p],W[q],X[r],Y[s],Z[t]->V[m]}>[1], param1:T[n], param2:U[p], param3:W[q], param4:X[r], param5:Y[s], param6:Z[t]):V[m];

native function meta::pure::functions::lang::eval<S,T,V,U,W,X,Y,Z|m,n,o,p,q,r,s,t>(func:Function<{S[n],T[o],U[p],W[q],X[r],Y[s],Z[t]->V[m]}>[1], param1:S[n], param2:T[o], param3:U[p], param4:W[q], param5:X[r], param6:Y[s], param7:Z[t]):V[m];

native function meta::pure::functions::lang::match<T,P|m,n,o>(var:Any[*], functions:Function<{Nil[n],P[o]->T[m]}>[1..*], with:P[o]):T[m];

native function meta::pure::functions::lang::if<T|m>(test:Boolean[1], valid:Function<{->T[m]}>[1], invalid:Function<{->T[m]}>[1]):T[m];

native function meta::pure::functions::lang::mutateAdd<T>(obj:T[1], property:String[1], value:Any[*]):T[1];