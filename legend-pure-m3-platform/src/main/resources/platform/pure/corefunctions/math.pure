// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::math::abs(int:Integer[1]):Integer[1];

native function meta::pure::functions::math::abs(float:Float[1]):Float[1];

native function meta::pure::functions::math::abs(number:Number[1]):Number[1];

native function meta::pure::functions::math::abs(decimal:Decimal[1]):Decimal[1];

native function meta::pure::functions::math::pow(base:Number[1], exponent:Number[1]):Number[1];

native function meta::pure::functions::math::exp(exponent:Number[1]):Float[1];

native function meta::pure::functions::math::log(value:Number[1]):Float[1];

native function meta::pure::functions::math::floor(number:Number[1]):Integer[1];

native function meta::pure::functions::math::ceiling(number:Number[1]):Integer[1];

native function meta::pure::functions::math::round(number:Number[1]):Integer[1];

native function meta::pure::functions::math::round(decimal:Decimal[1], scale:Integer[1]):Decimal[1];

native function meta::pure::functions::math::round(float:Float[1], scale:Integer[1]):Float[1];

native function meta::pure::functions::math::sin(number:Number[1]):Float[1];

native function meta::pure::functions::math::asin(number:Number[1]):Float[1];

native function meta::pure::functions::math::cos(number:Number[1]):Float[1];

native function meta::pure::functions::math::acos(number:Number[1]):Float[1];

native function meta::pure::functions::math::tan(number:Number[1]):Float[1];

native function meta::pure::functions::math::atan(number:Number[1]):Float[1];

native function meta::pure::functions::math::atan2(number1:Number[1], number2:Number[1]):Float[1];

native function meta::pure::functions::math::sqrt(number:Number[1]):Float[1];

native function meta::pure::functions::math::rem(dividend:Number[1], divisor:Number[1]):Number[1];

native function meta::pure::functions::math::stdDev(numbers:Number[1..*], isBiasCorrected: Boolean[1]):Number[1];

native function meta::pure::functions::math::mod(dividend:Integer[1], divisor:Integer[1]):Integer[1];

native function meta::pure::functions::math::toDecimal(number: Number[1]): Decimal[1];

native function meta::pure::functions::math::toFloat(number: Number[1]): Float[1];
