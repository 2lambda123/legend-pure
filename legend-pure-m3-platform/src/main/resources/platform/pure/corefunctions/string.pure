// Copyright 2020 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

native function meta::pure::functions::string::length(str:String[1]):Integer[1];

native function meta::pure::functions::string::indexOf(str:String[1], toFind:String[1]):Integer[1];

native function meta::pure::functions::string::indexOf(str:String[1], toFind:String[1], fromIndex:Integer[1]):Integer[1];

native function meta::pure::functions::string::split(str:String[1], token:String[1]):String[*];

native function meta::pure::functions::string::substring(str:String[1], start:Integer[1]):String[1];

native function meta::pure::functions::string::substring(str:String[1], start:Integer[1], end:Integer[1]):String[1];

native function meta::pure::functions::string::trim(str:String[1]):String[1];

native function meta::pure::functions::string::replace(source:String[1], toReplace:String[1], replacement:String[1]):String[1];

native function meta::pure::functions::string::contains(source:String[1], val:String[1]):Boolean[1];

native function meta::pure::functions::string::startsWith(source:String[1], val:String[1]):Boolean[1];

native function meta::pure::functions::string::endsWith(source:String[1], val:String[1]):Boolean[1];

native function meta::pure::functions::string::chunk(source:String[1], val:Integer[1]):String[*];

native function meta::pure::functions::string::toLower(source:String[1]):String[1];

native function meta::pure::functions::string::toUpper(source:String[1]):String[1];

native function meta::pure::functions::string::parseBoolean(string:String[1]):Boolean[1];

native function meta::pure::functions::string::parseDate(string:String[1]):Date[1];

native function meta::pure::functions::string::parseFloat(string:String[1]):Float[1];

native function meta::pure::functions::string::parseDecimal(string:String[1]):Decimal[1];

native function meta::pure::functions::string::parseInteger(string:String[1]):Integer[1];

native function meta::pure::functions::string::encodeBase64(string:String[1]):String[1];

native function meta::pure::functions::string::decodeBase64(string:String[1]):String[1];

native function meta::pure::functions::string::matches(string:String[1], regexp:String[1]):Boolean[1];


//Mapping
function meta::pure::functions::string::joinStrings(strings:String[*], separator:String[1]):String[1]
{
    $strings->joinStrings('', $separator, '')
}

function meta::pure::functions::string::toRepresentation(any:Any[1]):String[1]
{
    $any->match([
                 s:String[1] | '\'' + $s->replace('\'', '\\\'') + '\'',
                 d:Date[1] | '%' + $d->toString(),
                 d:Decimal[1] | $d->toString() + 'D',
                 n:Number[1] | $n->toString(),
                 b:Boolean[1] | $b->toString(),
                 p:PackageableElement[1] | if($p.name->isEmpty(), |'<' + $p->id() + ' instanceOf ' + $p->type()->elementToPath() + '>', |$p->elementToPath()),
                 a:Any[1] | '<' + $a->id() + ' instanceOf ' + $a->type()->elementToPath() + '>'
                ])
}